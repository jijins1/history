import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.Target
import org.jooq.meta.jaxb.Property



ext.genpath = new File("${projectDir}/build/generated-src/jooq/main")
buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.jooq', name: 'jooq', version: '3.13.4'
        classpath group: 'org.jooq', name: 'jooq-meta', version: '3.13.4'
        classpath group: 'org.jooq', name: 'jooq-meta-extensions', version: '3.13.4'
        classpath group: 'org.jooq', name: 'jooq-codegen', version: '3.13.4'
        classpath group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
    }
}
sourceSets.main.java.srcDirs += genpath.toString()

task generateCode() {
    println "${projectDir}/src/main/resources"
org.jooq.meta.jaxb.Configuration configuration = new org.jooq.meta.jaxb.Configuration()
        .withGenerator(new Generator()
                .withDatabase(new Database()
                        .withName("org.jooq.meta.extensions.liquibase.LiquibaseDatabase")
                        .withProperties(

                            // Specify the classpath location of your XML, YAML, or JSON script.
                            new Property()
                            .withKey("scripts")
                            .withValue("${projectDir}/src/main/resources/main.changelog.xml"),

                            // The property "changeLogParameters.contexts" will be passed on to the 
                            // liquibase.database.Database.update() call (jOOQ 3.13.2+).
                            // See https://www.liquibase.org/documentation/contexts.html
                            new Property()
                            .withKey("changeLogParameters.contexts")
                            .withValue("!test")
                        ))
                        .withGenerate()
                        .withTarget(
                            new Target()

                            // The destination package of your generated classes (within the
                            // destination directory)
                            // 
                            // jOOQ may append the schema name to this package if generating multiple schemas,
                            // e.g. org.jooq.your.packagename.schema1
                            // org.jooq.your.packagename.schema2
                            .withPackageName("org.ruokki.history.persistence.jooq")

                            // The destination directory of your generated classes
                            .withDirectory("${projectDir}/build/generated-src/jooq/main")
                        ));
            GenerationTool.generate(configuration);
}